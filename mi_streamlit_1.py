"""
===============================================================================
 PROYECTO: Tablero interactivo de an√°lisis y predicci√≥n de ping√ºinos üêß
 AUTORA: Laura Jaramillo
 CURSO: An√°lisis de Datos Avanzado - Talento Tech Innovador
 DESCRIPCI√ìN:
     Esta aplicaci√≥n web, creada con Streamlit, permite:
        1. Visualizar los datos del conjunto de ping√ºinos.
        2. Explorar gr√°ficamente las relaciones entre variables.
        3. Utilizar un modelo de Machine Learning (Random Forest)
           para predecir la especie de un ping√ºino seg√∫n sus caracter√≠sticas.
===============================================================================
"""

# ==============================
# üì¶ IMPORTACI√ìN DE LIBRER√çAS
# ==============================
import streamlit as st             # Interfaz web interactiva
import pandas as pd                # An√°lisis y manipulaci√≥n de datos
import matplotlib.pyplot as plt    # Visualizaci√≥n b√°sica
import seaborn as sns              # Visualizaci√≥n avanzada y est√©tica
import sklearn                     # Librer√≠a para machine learning
import joblib                      # Para cargar modelos guardados (.pickle/.joblib)


# ==============================
# ‚öôÔ∏è CONFIGURACI√ìN DE LA P√ÅGINA
# ==============================
st.set_page_config(
    layout='centered',               # Centra el contenido
    page_title='Talento Tech Innovador',  # T√≠tulo de la pesta√±a
    page_icon=':grinning:'           # Emoji en la pesta√±a
)

# Encabezado principal con dos columnas
t1, t2 = st.columns([0.3, 0.7])
# t1.image('./index.jpg', width=180)  # Imagen opcional
t2.title('Mi primer tablero')
t2.markdown('**tel:** 123 **| email:** talentotech@gmail.com')


# ==============================
# üß≠ CREACI√ìN DE SECCIONES (TABS)
# ==============================
steps = st.tabs([
    'Introducci√≥n', 
    'Visualizaci√≥n de datos', 
    'Modelo ML', 
    '$\int_{-\infty}^\infty e^{\sigma\mu}dt$'  # pesta√±a decorativa
])


# ==============================
# üü¢ SECCI√ìN 1: INTRODUCCI√ìN
# ==============================
with steps[0]:
    st.title('Metadata')
    st.write('Bienvenido a mi proyecto de an√°lisis de datos de ping√ºinos üêß')

    # Cargar el dataset
    df = pd.read_csv('penguins.csv')

    # Mostrar las primeras filas de los datos
    st.write("Vista previa de los datos:")
    st.dataframe(df.head())

# Mostrar las columnas disponibles (solo en la consola, √∫til para depuraci√≥n)
print(df.columns)


# ==============================
# üü° SECCI√ìN 2: VISUALIZACI√ìN DE DATOS
# ==============================
with steps[1]:
    st.markdown('### Gr√°fica de los tipos de Ping√ºinos')

    # Selectores interactivos
    species = st.selectbox(
        'Seleccione la especie a visualizar',
        ['Adelie', 'Gentoo', 'Chinstrap']
    )

    x = st.selectbox('Seleccione la variable para el eje X', list(df.columns))
    y = st.selectbox('Seleccione la variable para el eje Y', list(df.columns))

    # Crear el gr√°fico
    fig, ax = plt.subplots()
    sns.scatterplot(x=df[x], y=df[y], data=df, hue='species', ax=ax)
    ax.set_xlabel(x)
    ax.set_ylabel(y)
    ax.set_title(f'Relaci√≥n entre {x} y {y}')

    # Mostrar el gr√°fico en la app
    st.pyplot(fig)


# ==============================
# üîµ SECCI√ìN 3: MODELO DE MACHINE LEARNING
# ==============================
with steps[2]:
    st.markdown("### Predicci√≥n de la especie del ping√ºino üß†")

    # Cargar modelo previamente entrenado y mapeo de etiquetas
    rfc = joblib.load('random_forest_penguin.pickle')
    unique_penguin_mapping = joblib.load('output_penguin.pickle')

    # Mostrar el modelo (opcional, solo para ver estructura)
    st.write("Modelo cargado correctamente:", rfc)

    # --- Entradas del usuario ---
    island = st.selectbox('Isla', options=['Biscoe', 'Dream', 'Torgerson'])
    sex = st.selectbox('Sexo', options=['Female', 'Male'])
    bill_length = st.number_input('Bill Length (mm)', min_value=0)
    bill_depth = st.number_input('Bill Depth (mm)', min_value=0)
    flipper_length = st.number_input('Flipper Length (mm)', min_value=0)
    body_mass = st.number_input('Body Mass (g)', min_value=0)

    st.write('Datos ingresados:', 
             [island, sex, bill_length, bill_depth, flipper_length, body_mass])

    # --- Codificaci√≥n manual de variables categ√≥ricas ---
    island_biscoe, island_dream, island_torgerson = 0, 0, 0
    if island == 'Biscoe':
        island_biscoe = 1
    elif island == 'Dream':
        island_dream = 1
    elif island == 'Torgerson':
        island_torgerson = 1

    sex_female, sex_male = 0, 0
    if sex == 'Female':
        sex_female = 1
    elif sex == 'Male':
        sex_male = 1

    # --- Predicci√≥n con el modelo ---
    new_prediction = rfc.predict([[
        bill_length, bill_depth, flipper_length, body_mass,
        island_biscoe, island_dream, island_torgerson,
        sex_female, sex_male
    ]])

    # Obtener el nombre de la especie correspondiente
    prediction_species = unique_penguin_mapping[new_prediction][0]

    # Mostrar el resultado final
    st.success(f'‚úÖ La especie del ping√ºino es **{prediction_species}**')


# ==============================
# üß© SECCI√ìN 4: EXPRESI√ìN MATEM√ÅTICA
# ==============================
with steps[3]:
    st.latex(r"\int_{-\infty}^\infty e^{\sigma\mu}dt")
    st.write("Esta pesta√±a es decorativa, solo muestra una expresi√≥n matem√°tica.")

#Para correr python -m streamlit run "C:\Users\ZENBOOK\OneDrive - MUNICIPIO DE ENVIGADO\Documentos\Personales\Analisis de datos avanzado\Streamlit\mi_streamlit_1.py"
